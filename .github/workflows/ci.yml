name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install uv
        run: pip install uv
      - name: Install backend dependencies
        working-directory: backend
        run: uv sync --extra dev
      - name: Run backend tests
        working-directory: backend
        env:
          DATABASE_URL: "sqlite:///./ci.db"
          JWT_SECRET: "ci-secret"
          ACCESS_TOKEN_EXPIRE_MINUTES: "60"
          CORS_ORIGINS: "http://localhost"
        run: uv run pytest

  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false
      - name: Install dependencies
        working-directory: frontend
        run: pnpm install
      - name: Run frontend tests
        working-directory: frontend
        env:
          VITE_API_BASE_URL: http://localhost:8000
        run: pnpm test

  deploy:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    env:
      ACR_NAME: ${{ secrets.ACR_NAME }}
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT }}
      TF_BACKEND_RG: ${{ secrets.TF_STATE_RESOURCE_GROUP }}
      TF_BACKEND_STORAGE: ${{ secrets.TF_STATE_STORAGE_ACCOUNT }}
      TF_BACKEND_CONTAINER: ${{ secrets.TF_STATE_CONTAINER }}
      TF_BACKEND_KEY: ${{ secrets.TF_STATE_KEY }}
      TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_prefix: ${{ secrets.TF_VAR_PREFIX }}
      TF_VAR_acr_name: ${{ secrets.ACR_NAME }}
      TF_VAR_acr_resource_group: ${{ secrets.ACR_RESOURCE_GROUP }}
      TF_VAR_postgres_admin_login: ${{ secrets.POSTGRES_ADMIN_LOGIN }}
      TF_VAR_postgres_admin_password: ${{ secrets.POSTGRES_ADMIN_PASSWORD }}
      TF_VAR_container_image: ${{ secrets.ACR_LOGIN_SERVER }}/todo-api:${{ github.sha }}
      POSTGRES_DB_NAME: ${{ secrets.POSTGRES_DB_NAME }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        run: pip install uv

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set active subscription
        run: az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push backend image
        run: |
          az acr login --name "$ACR_NAME"
          docker buildx build \
            --platform linux/amd64 \
            --tag "$ACR_LOGIN_SERVER/todo-api:${GITHUB_SHA}" \
            --tag "$ACR_LOGIN_SERVER/todo-api:latest" \
            --push \
            backend

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform init
        working-directory: infra/terraform
        run: |
          terraform init \
            -backend-config="resource_group_name=${TF_BACKEND_RG}" \
            -backend-config="storage_account_name=${TF_BACKEND_STORAGE}" \
            -backend-config="container_name=${TF_BACKEND_CONTAINER}" \
            -backend-config="key=${TF_BACKEND_KEY}"

      - name: Terraform apply
        working-directory: infra/terraform
        env:
          TF_VAR_container_image: ${{ secrets.ACR_LOGIN_SERVER }}/todo-api:${{ github.sha }}
        run: terraform apply -auto-approve

      - name: Capture Terraform outputs
        id: tf_outputs
        working-directory: infra/terraform
        run: |
          echo "api_fqdn=$(terraform output -raw container_app_fqdn)" >> "$GITHUB_OUTPUT"
          echo "postgres_fqdn=$(terraform output -raw postgres_fqdn)" >> "$GITHUB_OUTPUT"

      - name: Install backend dependencies
        working-directory: backend
        run: uv sync

      - name: Run Alembic migrations
        working-directory: backend
        env:
          DATABASE_URL: postgresql+psycopg://${{ secrets.POSTGRES_ADMIN_LOGIN }}:${{ secrets.POSTGRES_ADMIN_PASSWORD }}@${{ steps.tf_outputs.outputs.postgres_fqdn }}:5432/${{ env.POSTGRES_DB_NAME }}?sslmode=require
        run: uv run alembic upgrade head

      - name: Install frontend dependencies
        working-directory: frontend
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        working-directory: frontend
        env:
          VITE_API_BASE_URL: https://${{ steps.tf_outputs.outputs.api_fqdn }}
        run: pnpm build

      - name: Upload frontend assets
        run: |
          az storage blob upload-batch \
            --auth-mode login \
            --account-name "$STORAGE_ACCOUNT" \
            --destination '$web' \
            --source frontend/dist \
            --pattern "*" \
            --overwrite
