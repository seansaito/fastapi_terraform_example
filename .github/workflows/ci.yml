name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install uv
        run: pip install uv
      - name: Install backend dependencies
        working-directory: backend
        run: uv sync --extra dev
      - name: Run backend tests
        working-directory: backend
        env:
          DATABASE_URL: "sqlite:///./ci.db"
          JWT_SECRET: "ci-secret"
          ACCESS_TOKEN_EXPIRE_MINUTES: "60"
          CORS_ORIGINS: "http://localhost"
        run: uv run pytest

  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false
      - name: Install dependencies
        working-directory: frontend
        run: pnpm install
      - name: Run frontend tests
        working-directory: frontend
        env:
          VITE_API_BASE_URL: http://localhost:8000
        run: pnpm test

  deploy:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    env:
      ACR_NAME: ${{ secrets.ACR_NAME }}
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT }}
      TF_BACKEND_RG: ${{ secrets.TF_STATE_RESOURCE_GROUP }}
      TF_BACKEND_STORAGE: ${{ secrets.TF_STATE_STORAGE_ACCOUNT }}
      TF_BACKEND_CONTAINER: ${{ secrets.TF_STATE_CONTAINER }}
      TF_BACKEND_KEY: ${{ secrets.TF_STATE_KEY }}
      TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_prefix: ${{ secrets.TF_VAR_PREFIX }}
      TF_VAR_acr_name: ${{ secrets.ACR_NAME }}
      TF_VAR_acr_resource_group: ${{ secrets.ACR_RESOURCE_GROUP }}
      TF_VAR_postgres_admin_login: ${{ secrets.POSTGRES_ADMIN_LOGIN }}
      TF_VAR_postgres_admin_password: ${{ secrets.POSTGRES_ADMIN_PASSWORD }}
      TF_VAR_container_image: ${{ secrets.ACR_LOGIN_SERVER }}/todo-api:${{ github.sha }}
      TF_VAR_environment: ${{ secrets.TF_VAR_ENVIRONMENT }}
      TF_VAR_location: ${{ secrets.TF_VAR_LOCATION }}
      TF_VAR_additional_key_vault_access_object_ids: ${{ secrets.TF_VAR_ADDITIONAL_KV_ACCESS_IDS || '[]' }}
      POSTGRES_DB_NAME: ${{ secrets.POSTGRES_DB_NAME }}
    steps:
      - uses: actions/checkout@v4

      - name: Apply environment defaults
        run: |
          echo "TF_VAR_environment=${TF_VAR_environment:-dev}" >> $GITHUB_ENV
          echo "TF_VAR_location=${TF_VAR_location:-japaneast}" >> $GITHUB_ENV

      - name: Compute resource identifiers
        run: |
          sanitized_prefix=$(echo "${TF_VAR_prefix:-azuretodo}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]//g')
          env_name=${TF_VAR_environment:-dev}
          echo "SANITIZED_PREFIX=$sanitized_prefix" >> $GITHUB_ENV
          echo "ENV_NAME=$env_name" >> $GITHUB_ENV
          echo "RESOURCE_GROUP=rg-${sanitized_prefix}-${env_name}" >> $GITHUB_ENV
          echo "LOG_ANALYTICS=law-${sanitized_prefix}-${env_name}" >> $GITHUB_ENV
          echo "KEY_VAULT=kv-${sanitized_prefix}-${env_name}" >> $GITHUB_ENV
          echo "IDENTITY_NAME=uai-${sanitized_prefix}-${env_name}" >> $GITHUB_ENV
          echo "CONTAINER_ENV=env-api-${sanitized_prefix}-${env_name}" >> $GITHUB_ENV
          echo "CONTAINER_APP=api-${sanitized_prefix}-${env_name}" >> $GITHUB_ENV
          echo "POSTGRES_NAME=psql-${sanitized_prefix}-${env_name}" >> $GITHUB_ENV

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        run: pip install uv

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set active subscription
        run: az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push backend image
        run: |
          az acr login --name "$ACR_NAME"
          REGISTRY=$(echo "$ACR_LOGIN_SERVER" | tr '[:upper:]' '[:lower:]')
          IMAGE_SHA="$REGISTRY/todo-api:${GITHUB_SHA}"
          docker buildx build \
            --platform linux/amd64 \
            --tag "$IMAGE_SHA" \
            --tag "$REGISTRY/todo-api:latest" \
            --push \
            backend
          {
            echo "REGISTRY_SANITIZED=$REGISTRY"
            echo "IMAGE_SHA=$IMAGE_SHA"
          } >> "$GITHUB_ENV"

      - name: Ensure Key Vault access for deploy principal
        env:
          ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
        run: |
          kv_scope="/subscriptions/${ARM_SUBSCRIPTION_ID}/resourceGroups/${RESOURCE_GROUP}/providers/Microsoft.KeyVault/vaults/${KEY_VAULT}"
          if ! az keyvault show --name "$KEY_VAULT" --resource-group "$RESOURCE_GROUP" >/dev/null 2>&1; then
            echo "Key Vault '$KEY_VAULT' not found yet; skipping RBAC preflight until after provisioning."
            exit 0
          fi

          sp_object_id=$(az ad sp show --id "$ARM_CLIENT_ID" --query id -o tsv)
          if [ -z "$sp_object_id" ]; then
            echo "Unable to resolve service principal object id for $ARM_CLIENT_ID" >&2
            exit 1
          fi

          # Check if role assignment already exists
          existing_assignment=$(az role assignment list --assignee "$sp_object_id" --scope "$kv_scope" --role "Key Vault Secrets Officer" --query '[0].id' -o tsv 2>/dev/null | tr -d '\r')

          assignment_ready=false

          if [ -z "$existing_assignment" ]; then
            echo "No Key Vault Secrets Officer role assignment found for this principal yet. Terraform should create or import it during apply."
          else
            echo "Role assignment already exists: $existing_assignment"
            assignment_ready=true
          fi

          if [ "$assignment_ready" = true ]; then
            # Verify we can access Key Vault secrets
            attempt=1
            max_attempts=20
            until az keyvault secret list --vault-name "$KEY_VAULT" --max-items 1 >/dev/null 2>&1; do
              if [ $attempt -ge $max_attempts ]; then
                echo "Key Vault RBAC not yet propagated after $attempt attempts ($(($max_attempts * 15)) seconds)" >&2
                exit 1
              fi
              echo "Waiting for Key Vault RBAC propagation... (attempt $attempt/$max_attempts)" >&2
              sleep 15
              attempt=$((attempt+1))
            done

            echo "Key Vault access verified successfully"
          else
            echo "Skipping Key Vault access verification because role assignment is not present yet. Terraform apply will create it." >&2
          fi

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform init
        working-directory: infra/terraform
        env:
          ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
          ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
        run: |
          terraform init \
            -backend-config="resource_group_name=${TF_BACKEND_RG}" \
            -backend-config="storage_account_name=${TF_BACKEND_STORAGE}" \
            -backend-config="container_name=${TF_BACKEND_CONTAINER}" \
            -backend-config="key=${TF_BACKEND_KEY}"

      - name: Sync Terraform state
        working-directory: infra/terraform
        env:
          ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
          ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
          TF_VAR_prefix: ${{ env.TF_VAR_prefix }}
          TF_VAR_environment: ${{ env.TF_VAR_environment }}
        run: |
          resource_group="${RESOURCE_GROUP}"
          workspace="${LOG_ANALYTICS}"
          key_vault="${KEY_VAULT}"
          identity_name="${IDENTITY_NAME}"
          container_env="${CONTAINER_ENV}"
          container_app="${CONTAINER_APP}"
          postgres_name="${POSTGRES_NAME}"
          database_name="${POSTGRES_DB_NAME:-todoapp}"

          if ! terraform state show module.resource_group.azurerm_resource_group.this >/dev/null 2>&1; then
            terraform import module.resource_group.azurerm_resource_group.this "/subscriptions/${ARM_SUBSCRIPTION_ID}/resourceGroups/${resource_group}"
          fi

          if ! terraform state show module.log_analytics.azurerm_log_analytics_workspace.this >/dev/null 2>&1; then
            terraform import module.log_analytics.azurerm_log_analytics_workspace.this "/subscriptions/${ARM_SUBSCRIPTION_ID}/resourceGroups/${resource_group}/providers/Microsoft.OperationalInsights/workspaces/${workspace}"
          fi

          if ! terraform state show module.key_vault.azurerm_key_vault.this >/dev/null 2>&1; then
            terraform import module.key_vault.azurerm_key_vault.this "/subscriptions/${ARM_SUBSCRIPTION_ID}/resourceGroups/${resource_group}/providers/Microsoft.KeyVault/vaults/${key_vault}"
          fi

          if az identity show --name "${identity_name}" --resource-group "${resource_group}" >/dev/null 2>&1; then
            if ! terraform state show azurerm_user_assigned_identity.container_app >/dev/null 2>&1; then
              terraform import azurerm_user_assigned_identity.container_app "/subscriptions/${ARM_SUBSCRIPTION_ID}/resourceGroups/${resource_group}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/${identity_name}"
            fi
          fi

          if az postgres flexible-server show --name "${postgres_name}" --resource-group "${resource_group}" >/dev/null 2>&1; then
            if ! terraform state show module.postgres.azurerm_postgresql_flexible_server.this >/dev/null 2>&1; then
              terraform import module.postgres.azurerm_postgresql_flexible_server.this "/subscriptions/${ARM_SUBSCRIPTION_ID}/resourceGroups/${resource_group}/providers/Microsoft.DBforPostgreSQL/flexibleServers/${postgres_name}"
            fi
            if ! terraform state show module.postgres.azurerm_postgresql_flexible_server_database.this >/dev/null 2>&1; then
              terraform import module.postgres.azurerm_postgresql_flexible_server_database.this "/subscriptions/${ARM_SUBSCRIPTION_ID}/resourceGroups/${resource_group}/providers/Microsoft.DBforPostgreSQL/flexibleServers/${postgres_name}/databases/${database_name}"
            fi
            if ! terraform state show module.postgres.azurerm_postgresql_flexible_server_firewall_rule.azure_services >/dev/null 2>&1; then
              terraform import module.postgres.azurerm_postgresql_flexible_server_firewall_rule.azure_services "/subscriptions/${ARM_SUBSCRIPTION_ID}/resourceGroups/${resource_group}/providers/Microsoft.DBforPostgreSQL/flexibleServers/${postgres_name}/firewallRules/allow-azure-services"
            fi
          fi

          if [ -n "${STORAGE_ACCOUNT}" ]; then
            if az storage account show --name "${STORAGE_ACCOUNT}" --resource-group "${resource_group}" >/dev/null 2>&1; then
              if ! terraform state show module.static_site.azurerm_storage_account.this >/dev/null 2>&1; then
                terraform import module.static_site.azurerm_storage_account.this "/subscriptions/${ARM_SUBSCRIPTION_ID}/resourceGroups/${resource_group}/providers/Microsoft.Storage/storageAccounts/${STORAGE_ACCOUNT}"
              fi
            fi
          fi

          if az containerapp env show --name "${container_env}" --resource-group "${resource_group}" >/dev/null 2>&1; then
            if ! terraform state show module.container_app.azurerm_container_app_environment.this >/dev/null 2>&1; then
              terraform import module.container_app.azurerm_container_app_environment.this "/subscriptions/${ARM_SUBSCRIPTION_ID}/resourceGroups/${resource_group}/providers/Microsoft.App/managedEnvironments/${container_env}"
            fi
          fi

          if az containerapp show --name "${container_app}" --resource-group "${resource_group}" >/dev/null 2>&1; then
            if ! terraform state show module.container_app.azurerm_container_app.this >/dev/null 2>&1; then
              terraform import module.container_app.azurerm_container_app.this "/subscriptions/${ARM_SUBSCRIPTION_ID}/resourceGroups/${resource_group}/providers/Microsoft.App/containerApps/${container_app}"
            fi
          fi

          if az keyvault secret show --vault-name "${key_vault}" --name "jwt-secret" >/dev/null 2>&1; then
            if ! terraform state show azurerm_key_vault_secret.jwt >/dev/null 2>&1; then
              secret_id=$(az keyvault secret show --vault-name "${key_vault}" --name "jwt-secret" --query id -o tsv | tr -d '\r')
              terraform import azurerm_key_vault_secret.jwt "$secret_id"
            fi
          fi

          if az keyvault secret show --vault-name "${key_vault}" --name "database-url" >/dev/null 2>&1; then
            if ! terraform state show azurerm_key_vault_secret.database_url >/dev/null 2>&1; then
              secret_id=$(az keyvault secret show --vault-name "${key_vault}" --name "database-url" --query id -o tsv | tr -d '\r')
              terraform import azurerm_key_vault_secret.database_url "$secret_id"
            fi
          fi

          identity_principal_id=""
          if az identity show --name "${identity_name}" --resource-group "${resource_group}" >/dev/null 2>&1; then
            identity_principal_id=$(az identity show --name "${identity_name}" --resource-group "${resource_group}" --query principalId -o tsv | tr -d '\r')
          fi

          if [ -n "$identity_principal_id" ]; then
            acr_scope="/subscriptions/${ARM_SUBSCRIPTION_ID}/resourceGroups/${TF_VAR_acr_resource_group:-${resource_group}}/providers/Microsoft.ContainerRegistry/registries/${ACR_NAME}"
            acr_assignment=$(az role assignment list --assignee "$identity_principal_id" --scope "$acr_scope" --query "[0].id" -o tsv | tr -d '\r')
            if [ -n "$acr_assignment" ]; then
              if ! terraform state show azurerm_role_assignment.container_app_acr >/dev/null 2>&1; then
                terraform import azurerm_role_assignment.container_app_acr "$acr_assignment"
              fi
            fi

            kv_scope="/subscriptions/${ARM_SUBSCRIPTION_ID}/resourceGroups/${resource_group}/providers/Microsoft.KeyVault/vaults/${key_vault}"
            kv_assignment=$(az role assignment list --assignee "$identity_principal_id" --scope "$kv_scope" --query "[0].id" -o tsv | tr -d '\r')
            if [ -n "$kv_assignment" ]; then
              if ! terraform state show module.container_app.azurerm_role_assignment.keyvault >/dev/null 2>&1; then
                terraform import module.container_app.azurerm_role_assignment.keyvault "$kv_assignment"
              fi
            fi
          fi

      - name: Terraform apply
        working-directory: infra/terraform
        env:
          ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
          ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
          TF_VAR_container_image: ${{ env.IMAGE_SHA }}
        run: terraform apply -auto-approve

      - name: Capture Terraform outputs
        id: tf_outputs
        working-directory: infra/terraform
        run: |
          echo "api_fqdn=$(terraform output -raw container_app_fqdn)" >> "$GITHUB_OUTPUT"
          echo "postgres_fqdn=$(terraform output -raw postgres_fqdn)" >> "$GITHUB_OUTPUT"

      - name: Install backend dependencies
        working-directory: backend
        run: uv sync

      - name: Run Alembic migrations
        working-directory: backend
        env:
          DATABASE_URL: postgresql+psycopg://${{ secrets.POSTGRES_ADMIN_LOGIN }}:${{ secrets.POSTGRES_ADMIN_PASSWORD }}@${{ steps.tf_outputs.outputs.postgres_fqdn }}:5432/${{ env.POSTGRES_DB_NAME }}?sslmode=require
        run: uv run alembic upgrade head

      - name: Install frontend dependencies
        working-directory: frontend
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        working-directory: frontend
        env:
          VITE_API_BASE_URL: https://${{ steps.tf_outputs.outputs.api_fqdn }}
        run: pnpm build

      - name: Upload frontend assets
        run: |
          az storage blob upload-batch \
            --auth-mode login \
            --account-name "$STORAGE_ACCOUNT" \
            --destination '$web' \
            --source frontend/dist \
            --pattern "*" \
            --overwrite
